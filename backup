#!/bin/bash
# backup files and directories according to a <confname>.ini file
# e.g. buddycloud.ini if $1=='buddycloud'

# TODO - allow spaces in filenames.

function regexify()
{
  # construct a single regex out of a set of sub-regexes.
  regexes="("
  once=0
  for path in "${@}"; do
    if [ $once -ne 0 ]; then
      regexes+="|"
    fi
    once=1
    path=^$path
    if [ "$path" == "${path%/}" ]; then
      # no trailing / so it's a single filename
      path+="$"
    else
      # it's a directory, so allow the directory and all below.
      path=${path%/}
    fi
    regexes+=$path
  done
  regexes+=")"
}

finish () {
  # leave the script, and print and log a message.
  err="$1"
  message="$2"
  if [ "$" == "" ] ; then
    message="Bye bye."
  fi
  echo -e "Exiting: $message"
  if [ "$mode" == "nightly" ]; then
    echo "`date` - $message" >>$summaryfile
  fi
  exit $err
}

# read in arguments
parms=()
mode=manual
while [ "$1" != "" ]; do
  if [ "$1" == "-h" ] || [ "$1" == "--help" ]; then
    mode=help
    break
  fi
  if [ "$1" == "-s" ] || [ "$1" == "--summarise" ]; then
    mode=summary
    break
  fi
  if [ "$1" == "-a" ] || [ "$1" == "--auto" ]; then
    mode=nightly
    shift
    continue
  fi
  parms+=( "$1" )
  shift
done

if [ "$mode" == "help" ] || [ "$mode" != "summary" ] && [ ${#parms[*]} -eq 0 ]; then
    echo "backup [-a] [-s] [<config-name>...]"
    echo "run a backup configuration from $CONFDIR/<config-name>.ini"
    exit 1
fi

# work out where I am and find some things.
mydir=`readlink -f $0`
mydir=${mydir%/*}
. $mydir/bash-ini-multisection/ini-parse.sh
confdir=${0%/*}
if [ "$confdir" == "." ]; then
  confdir=`pwd`
fi
if [ "$confdir" == ".." ]; then
  confdir=`pwd`
  confdir=${confdir%/*}
fi
confdir=${confdir%/*}/etc # edit this if your global config is somewhere else.

# set some defaults.
rootdir=/
backupdir=/var/backups
include=""
exclude=""
nightlyfiles=8
weeklyday=Tue
weeklyfiles=5
monthlyday=01
monthlyfiles=3
logfile=/var/log/backup.log
errfile=/var/log/backup.err
summaryfile=/var/log/backup.smy
mailto=
mailopts=
usbfsname=
usbmountpoint=
usbdeviceletter=b
rsyncopts=

# parse the global configuration 
cfg_parser $confdir/backup.ini
cfg_section_merge global
eval rootdir=$rootdir # eval is so ~ works
eval backupdir=$backupdir
eval logfile=$logfile
eval errfile=$errfile
eval summaryfile=$summaryfile
eval mailto=$mailto # to remove quotes
eval mailopts=$mailopts # ditto

if [ "$mode" == "summary" ] && [ "$mailto" != "" ]; then
  echo -e "\nDisk usage\n----------\n`df -h`" >> $summaryfile
  cat $summaryfile | mail $mailopts -s "Backup summary for $USER@$HOSTNAME" $mailto
  echo -e "Summary of this week's backup runs for $USER@$HOSTNAME.\n" > $summaryfile
  exit 0
fi

if [ "$mode" == "nightly" ]; then
  # redirect output.
  echo "Starting up at `date`" >>$logfile
  echo "Starting up at `date`" >>$errfile
  exec >>$logfile 2>>$errfile
fi

if [ "$usbmountpoint" != "" ]; then
  # try to mount a USB drive
  if ! mount | egrep -q "\bon $usbmountpoint"; then
    echo -n "Trying to mount removable device..."
    for dev in /dev/sd[$usbdeviceletter-z]?; do
      devlabel=`e2label $dev`
      if [ "${devlabel#$usbfsname}" != "$devlabel" ]; then
        # the filesystem's label starts with the right string
        mount $dev $usbmountpoint || finish 2 "\nError - can't mount backup device $dev"
        echo " done."
        break
      else
        finish 2 "\nError - can't find backup device to mount"
      fi
    done
  fi
fi

# start doing the backups.
echo -n "Starting backup(s) in "
if [ "$mode" == "manual" ] ; then
  echo -n "manual"
else
  echo -n "automatic"
fi
echo " mode"

for config in "${parms[@]}"; do
  echo
  echo "Backing up $config"

  conffile=$confdir/backup.d/${config}.ini

  if ! [ -r "$conffile" ] ; then
    echo "configuration '$config' does not exist"
    continue
  fi

  mkdir -p $backupdir/$config/manual $backupdir/$config/nightly $backupdir/$config/weekly $backupdir/$config/monthly
  modedir=$backupdir/$config/$mode
  outdir=$modedir/${config}-`date +%Y-%m-%d-%H-%M-%S`

  if ! [ -f "$conffile" ] ; then
      finish 2 "  Error - configuration $config not found"
  fi

  if [ -f "$outdir" ]; then
      finish 2 "  Error - output dir already exists."
  fi

  # read the file for this backup config.
  cfg_parser $conffile

  # read in any overridden globals and the file include and exclude lists
  globrsyncopts=rsyncopts
  cfg_section_merge global
  cfg_section files
  eval rsyncopts=$rsyncopts # to remove quotes
  
  echo "  Backing up files:"
  echo "  Including: $include"
  echo "  Excluding: $exclude"
  # turn the entries into full regexes.
  if [ "${exclude}" == "" ] ; then
    exclude="^$" # i.e. exclude nothing
  fi
  regexify $exclude
  exclude=$regexes

  # start making the output directory
  if [ "`ls $modedir`" != "" ] ; then
    olddir=$modedir/`ls $modedir -t | head -n 1`
  else
    mkdir -p $modedir/dummy $modedir/dummy/files $modedir/dummy/databases
    olddir=$modedir/dummy
    sleep 2 # so the dummy dir is older than the new dir.
  fi
  mkdir -p $outdir $outdir/files $outdir/databases
  if [ "$include" != "" ] ; then
    # there are files to back up. Include paths relative to rootdir.
    cd $rootdir
    if [ "$mode" == "manual" ] ; then
      verbose=
    else
      verbose=v
    fi
    find $include -type f 2>/dev/null | sort | uniq | egrep -v $exclude | rsync -rt$verbose --delete --link-dest=$olddir/files --files-from - $rsyncopts $rootdir $outdir/files
  fi

  # now dump all the databases
  echo "  Backing up databases"
  cfg_section_keys database
  for key in ${keys[*]}; do
      cfg_section database $key
      echo -n "    $name "
      case $type in
          mysql)
              echo '(mysql)'
              mysqldump $name --user=$username --password=$password --single-transaction > $outdir/databases/$name.sql
              ;;
          pgsql)
              echo '(pgsql)'
              pg_dump -U $username $name > $outdir/databases/$name.sql
              ;;
          *)
              echo '(not recognised)'
              ;;
      esac
  done

  if [ "$mode" == "nightly" ] ; then
    # we're in auto mode, so make copies in the weekly and monthly dirs if appropriate.
    rm -f $backupdir/$config/latest
    ln -s $outdir $backupdir/$config/latest
    date=`date`
    if [ `date -d "$date" +%a` == "$weeklyday" ] && [ $weeklyfiles -gt 0 ] ; then
      cp -rl $outdir $backupdir/$config/weekly
    fi
    if [ `date -d "$date" +%d` == "$monthlyday" ] && [ $monthlyfiles -gt 0 ] ; then
      cp -rl $outdir $backupdir/$config/monthly
    fi
    # remove old backup files from auto directories.
    cd $backupdir/$config/nightly || {
      finish 2 "Error - Can't find nightly backup dir."
    }
    ls -t | tail -n +$(( $nightlyfiles + 1 )) | xargs rm -rf
    if [ $weeklyfiles -gt 0 ] ; then
      cd $backupdir/$config/weekly || {
        finish 2 "Error - Can't find weekly backup dir."
      }
      ls -t | tail -n +$(( $weeklyfiles + 1 )) | xargs rm -rf
    fi
    if [ $monthlyfiles -gt 0 ] ; then
      cd $backupdir/$config/monthly || {
        finish 2 "Error - Can't find monthly backup dir."
      }
      ls -t | tail -n +$(( $monthlyfiles + 1 )) | xargs rm -rf
    fi
  fi
  # restore rsyncopts to global default
  rsyncopts=globrsyncopts
done

finish 0 "Backup completed"

