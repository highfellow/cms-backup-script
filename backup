#!/bin/bash
# backup files and directories according to a <confname>.ini file
# e.g. buddycloud.ini if $1=='buddycloud'

# TODO - allow spaces in filenames.

function regexify()
{
  regexes="("
  once=0
  for path in "${@}"; do
    if [ $once -ne 0 ]; then
      regexes+="|"
    fi
    once=1
    path=^$path
    if [ "$path" == "${path%/}" ]; then
      # no trailing / so it's a single filename
      path+="$"
    else
      # it's a directory, so allow the directory and all below.
      path=${path%/}
    fi
    regexes+=$path
  done
  regexes+=")"
}

parms=()
tardir=manual
while [ "$1" != "" ]; do
  if [ "$1" == "-a" ] ; then
    tardir=nightly
    shift
    continue
  fi
  parms+=( "$1" )
  shift
done

mydir=`readlink -f $0`
mydir=${mydir%/*}
. $mydir/bash-ini-multisection/ini-parse.sh
confdir=${0%/*}
if [ "$confdir" == "." ]; then
  confdir=`pwd`
fi
if [ "$confdir" == ".." ]; then
  confdir=`pwd`
  confdir=${confdir%/*}
fi
confdir=${confdir%/*}/etc # edit this if your global config is somewhere else.
if [ "$mydir" == "." ]; then
  mydir=`pwd`
fi
if [ "$mydir" == ".." ]; then
  mydir=`pwd`
  mydir=${mydir%/*}
fi
cfg_parser $confdir/backup.ini
cfg_section global
eval rootdir=$rootdir # eval is so ~ works
eval tmpdir=$tmpdir
eval backupdir=$backupdir


if [ ${#parms[*]} -eq 0 ]; then
    echo "backup <config-name>"
    echo "run a backup configuration from $CONFDIR/<config-name>.ini"
    exit 1
fi

echo -n "Starting backup(s) in "
if [ "$tardir" == "manual" ] ; then
  echo -n "manual"
else
  echo -n "automatic"
fi
echo -e " mode"

# do each of the backups
for config in "${parms[@]}"; do
  echo
  echo "Backing up $config"
  cd $rootdir # all paths relative to home directory
  tarfile=$backupdir/$tardir/${config}/${config}-`date +%Y-%m-%d-%H-%M-%S`.tar
  conffile=$confdir/backup.d/${config}.ini
  echo $conffile

  mkdir -p $backupdir/manual/$config $backupdir/nightly/$config $backupdir/weekly/$config $backupdir/monthly/$config

  if ! [ -d "$tmpdir" ] ; then
    echo "  Error - Temporary directory not found"
    exit 1
  fi

  if ! [ -f "$conffile" ] ; then
      echo "  Error - configuration $config not found"
      exit 1
  fi

  if [ -f "$tarfile" ]; then
      echo "  Error - output file already exists."
  fi

  # read the file for this backup config.
  cfg_parser $conffile

  # backup the files.
  # read in the include and exclude lists
  cfg_section files
  echo "  Backing up files:"
  echo "  Including: $include"
  echo "  Excluding: $exclude"
  # turn the entries into full regexes.
  if [ "${exclude}" == "" ] ; then
    exclude="^$" # i.e. exclude nothing
  fi
  regexify $exclude
  exclude=$regexes

  find $include | sort | uniq | egrep -v $exclude | tar zcf $tmpdir/backup-files.tar.gz --files-from -
  # add the files archive to the full archive (which includes databases).
  cd $tmpdir
  tar cf $tarfile backup-files.tar.gz
  rm backup-files.tar.gz

  # now dump all the databases
  echo "  Backing up databases"
  cfg_section_keys database
  for key in ${keys[*]}; do
      cfg_section database $key
      echo -n "    $name "
      case $type in
          mysql)
              echo '(mysql)'
              mysqldump $name --user=$username --password=$password > $name.sql
              ;;
          pgsql)
              echo '(pgsql)'
              pg_dump -U $username $name > $name.sql
              ;;
          *)
              echo '(not recognised)'
              ;;
      esac
      gzip $name.sql
      tar rf $tarfile $name.sql.gz # append the sql file to the full archive
      rm $name.sql.gz
  done

  if [ "$tardir" == "nightly" ] ; then
    # we're in auto mode, so make links in the weekly and monthly dirs if appropriate.
    if [ "$nightlyfiles" == "" ] || [ "$weeklyday" == "" ] || [ "$weeklyfiles" == "" ] || [ "$monthlyday" == "" ] || [ "$monthlyfiles" == "" ] ; then
      echo "  Error - Missing configuration entries for auto mode"
      exit 1
    fi
    date=`date`
    if [ `date -d "$date" +%a` == "$weeklyday" ] ; then
      ln $tarfile $backupdir/weekly/$config
    fi
    if [ `date -d "$date" +%d` == "$monthlyday" ] ; then
      ln $tarfile $backupdir/monthly/$config
    fi
    # remove old backup files from auto directories.
    if ! [ -d $backupdir/nightly/$config ] ; then
      echo "Error - Can't find nightly backup dir."
      exit 1
    fi
    cd $backupdir/nightly/$config
    ls -t | tail -n +$(( $nightlyfiles + 1 )) | xargs rm -f
    if ! [ -d $backupdir/weekly/$config ] ; then
      echo "Error - Can't find weekly backup dir."
      exit 1
    fi
    cd $backupdir/weekly/$config
    ls -t | tail -n +$(( $weeklyfiles + 1 )) | xargs rm -f
    if ! [ -d $backupdir/monthly/$config ] ; then
      echo "Error - Can't find monthly backup dir."
      exit 1
    fi
    cd $backupdir/monthly/$config
    ls -t | tail -n +$(( $monthlyfiles + 1 )) | xargs rm -f
  fi
done
