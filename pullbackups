#!/bin/bash
#
# Script to pull down a set of backups generated by 'backup' from a remote
# server. Intended to run nightly and generate a set of weekly and monthly
# snapshots from a smaller set of nightlies on the server.
#

finish () {
  # leave the script, and print and log a message.
  err="$1"
  message="$2"
  if [ "$" == "" ] ; then
    message="Bye bye."
  fi
  echo "Exiting: $message"
  if [ "$mode" == "auto" ]; then
    echo -e "`date` - $message" >>$summaryfile
  fi
  exit $err
}

# set some defaults
backupdir=/var/backups

# read in arguments
parms=()
mode=manual
while [ "$1" != "" ]; do
  if [ "$1" == "-h" ] || [ "$1" == "--help" ]; then
    mode=help
    break
  fi
  if [ "$1" == "-p" ] || [ "$1" == "--stop" ]; then
    mode=stop
    break
  fi
  if [ "$1" == "-s" ] || [ "$1" == "--summarise" ]; then
    mode=summary
    break
  fi
  if [ "$1" == "-a" ] || [ "$1" == "--auto" ]; then
    mode=auto
    shift
    continue
  fi
  parms+=( "$1" )
  shift
done

if [ "$mode" == "help" ] || [ "$mode" != "summary" ] && [ "$mode" != "stop" ] && [ ${#parms[*]} -eq 0 ]; then
    echo "pullbackups [--auto] [--summarise] [--stop] remotename..."
    echo "pull a set of backups generated by backup script from a remote server"
    exit 2 
fi

# work out where I am and find some things.
mydir=`readlink -f $0`
mydir=${mydir%/*}
. $mydir/bash-ini-multisection/ini-parse.sh
confdir=${0%/*}
if [ "$confdir" == "." ]; then
  confdir=`pwd`
fi
if [ "$confdir" == ".." ]; then
  confdir=`pwd`
  confdir=${confdir%/*}
fi
# expecting this script to be in path/bin with config in path/etc
confdir=${confdir%/*}/etc # edit this if your global config is somewhere else.

# set some defaults.
nightlyfiles=8
weeklyday=Tue
weeklyfiles=5
monthlyday=01
monthlyfiles=3
mailto=
summaryfile=/var/log/pullbackups.smy
logfile=/var/log/pullbackups.log
errfile=/var/log/pullbackups.err

# parse the global configuration 
cfg_parser $confdir/pullbackups.ini
cfg_section global
eval backupdir=$backupdir # so that ~s work.
eval logfile=$logfile
eval errfile=$errfile
eval summaryfile=$summaryfile
eval rsyncerrfile=$rsyncerrfile
eval mailto=$mailto # to split quoted words

if [ "$backupdir" == "" ] ; then
  echo "Backup directory not found in $confdir/pullbackups.ini"
  exit 2
fi

if [ "$mode" == "summary" ] && [ "$mailto" != "" ]; then
  # mail the summary log
  echo -e "\nDisk usage\n----------\n`df -h`" >> $summaryfile
  cat $summaryfile | mail -s "Pullbackups summary for `whoami`@`hostname`" $mailto
  echo -e "Summary of this week's fetches of remote backups for `whoami`@`hostname`.\n" > $summaryfile
  exit 0
fi
if [ "$mode" == "stop" ]; then
  # signal a stop to the main process
  echo "stop" > $rsyncerrfile
  exit 0
fi

if [ "$mode" == "auto" ]; then
  # auto (logging) mode so redirect output.
  echo -e "Starting up at `date`" >>$logfile
  echo -e "Starting up at `date`" >>$errfile
  exec >>$logfile 2>>$errfile
fi

echo -n "Pulling down backups to $backupdir in "
if [ "$mode" == "manual" ]; then
  echo -n "manual"
else
  echo -n "automatic"
fi
echo " mode"

cd $backupdir
exitcode=0
exitmsg="Backups pulled down okay"
for remote in ${parms[*]}; do
  # parse the ini file for this remote account
  if ! [ -f $confdir/pullbackups.d/$remote.ini ] ; then
    echo "Can't find remote configuration file: $confdir/pullbackups.d/$remote.ini"
    finish 2 "configuration error"
  fi
  echo "processing backups for remote account: $remote"
  remotedir=
  cfg_parser $confdir/pullbackups.d/$remote.ini
  cfg_section remote
  if [ "$remotedir" == "" ] ; then
    echo "Remote directory not found in $confdir/pullbackups.d/$remote.ini"
    finish 2 "configuration error"
  fi
  # iterate through list of remote configs
  eval remoteconfigs=$remoteconfigs # to split quoted words
  for config in ${remoteconfigs[*]}; do
    localdir=$backupdir/$remote/$config
    # make subdirs if needed
    mkdir -p $localdir/nightly $localdir/weekly $localdir/monthly
    # pull down last nightly from remote.
    echo "pulling last nightly for $config"
    if [ "`ls $localdir/nightly`" != "" ]; then
      olddir=$localdir/nightly/`ls -r $localdir/nightly | head -n 1`
    else
      olddir=$localdir/nightly/1970-01-01-00-00-00
      mkdir -p $olddir
      sleep 2 # so new dir is datestamped later.
    fi
    export newdir=$localdir/nightly/`date +%Y-%m-%d-%H-%M-%S`
    mkdir -p newdir
    if [ "$mode" == "manual" ] ; then
      verbose=
    else
      verbose=v
    fi
    rm -f $rsyncerrfile
    export rsyncerrfile verbose olddir remotedir config newdir
    # start rsync in a sub shell.
    (rsync -atz$verbose --copy-links --partial --delete --link-dest=$olddir $remotedir/$config/latest/ $newdir; echo "$?">$rsyncerrfile) &
    rsyncpid=$!
    while ! [ -f $rsyncerrfile ]; do
      sleep 10
    done
    rsyncerr=`cat $rsyncerrfile`
    if [ "$rsyncerr" == "stop" ] ; then
      # have been signalled to stop the rsync process
      kill $rsyncpid
      sleep 15
      rsyncerr=`cat $rsyncerrfile`
    fi
    rm -f $rsyncerrfile
    echo "Rsync finished - exit code $rsyncerr."
    case $rsyncerr in
      (20|23|24)
        # transfer interrupted or incomplete, or other recoverable error.
        # hard-link remaining files into the new nightly dir. (so they're not
        # missing on the next run).
        echo "Incomplete transfer - adding missing files."
        cp -rnl $olddir/* $newdir
        exitcode=1
        exitmsg="Transfer incomplete."
        ;;
      (0)
        # success.
        exitcode=0
        exitmsg="Transfer complete."
        ;;
      (*)
        # other error - delete bad copy.
        rm -rf $newdir
        finish 2 "Transfer failed."
        ;;
    esac

    echo "generating weeklies/monthlies for $config"
    # remove old backup files from auto directories.
    cd $localdir/nightly || {
      echo "Error - Can't find nightly backup dir."
      finish 2 "configuration error"
    }
    ls -r | tail -n +$(( $nightlyfiles + 1 )) | xargs rm -rf
    if [ `date -d "$date" +%a` == "$weeklyday" ] && [ $weeklyfiles -gt 0 ] ; then
      cp -rl $newdir $localdir/weekly
    fi
    if [ $weeklyfiles -gt 0 ] ; then
      cd $localdir/weekly || {
        echo "Error - Can't find weekly backup dir."
        finish 2 "configuration error"
      }
      ls -r | tail -n +$(( $weeklyfiles + 1 )) | xargs rm -rf
    fi
    if [ `date -d "$date" +%d` == "$monthlyday" ] && [ $monthlyfiles -gt 0 ] ; then
      cp -rl $newdir $localdir/monthly
    fi
    if [ $monthlyfiles -gt 0 ] ; then
      cd $localdir/monthly || {
        echo "Error - Can't find monthly backup dir."
        finish 2 "configuration error"
      }
      ls -r | tail -n +$(( $monthlyfiles + 1 )) | xargs rm -rf
    fi
  done
done
finish $exitcode "$exitmsg"

